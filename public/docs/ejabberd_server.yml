swagger: '2.0'
info:
  version: "1.0.0"
  title: "Ejabberd REST API for backend administration"
  description: |
      * **full JID** - is a **bare JID** with online user's resource to uniquely identify user's connection (f.e. **alice@wonderland.com/resource**).
schemes:
  - http
basePath: /api
consumes:
  - application/json
produces:
  - application/json
host: "localhost:5000"
paths:
  /server/register:
    post:
      tags:
        - "User management"
      parameters:
        - name: body
          in: body
          description: userInfo
          required: true
          schema:
            title: body
            type: object
            properties:
              user:
                example: "bb"
                type: string
              host:
                example: "example.com"
                type: string
              password:
                example: "SomEPass44"
                type: string
      description: Register a user
      responses:
        200:
          description: Raw result string
          schema:
            title: successMessage
            type: object
            properties:
              "success":
                type: "string"
                example: true
  /server/registered_users:
    post:
      tags:
        - "User management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            title: body
            type: object
            properties:
              host:
                example: "example.com"
                type: string
      description: List all registered users in HOST
      responses:
        200:
          description: List of registered accounts usernames
          schema:
            title: successMessage
            type: object
            properties:
              "success":
                type: "string"
                examplr: true
              "data":
                type: "string"
                example: [
                  "user1",
                  "user2"
                ]
  /server/get_last:
    post:
      tags:
        - "User management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            title: body
            type: object
            properties:
              user:
                example: "user1"
                type: string
              host:
                example: "myserver.com"
                type: string
      description: "Get last activity information.<br/><br/>
        Timestamp is UTC and XEP-0082 format, for example: 2017-02-23T22:25:28.063062Z ONLINE"
      responses:
        200:
          description: Last activity timestamp and status
          schema:
            title: successMessage
            type: object
            properties:
              "success":
                type: "string"
                example: true
              "data":
                type: "string"
                example: {
                  "timestamp": "2017-06-30T14:32:16.060684Z",
                  "status": "ONLINE"
                }
  /server/get_presence:
    post:
      tags:
        - "User management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            title: body
            type: object
            properties:
              user:
                example: "peter"
                type: string
              host:
                example: "myexample.com"
                type: string
      description: "Retrieve the resource with highest priority, and its presence (show and status message) for a given user.<br/><br/>
        The 'jid' value contains the user jid with resource. The 'show' value contains the user presence flag. <br/>
        It can take limited values:
        - available - chat (Free for chat) - away - dnd (Do not disturb) - xa (Not available, extended away) - unavailable (Not connected)<br/><br/>
        'status' is a free text defined by the user client."
      responses:
        200:
          description: Successful operation
          schema:
            title: successMessage
            type: object
            properties:
              "success":
                type: "string"
                example: true
              "data":
                type: "string"
                example: {
                  "jid": "user1@myserver.com/tka",
                  "show": "dnd",
                  "status": "Busy"
                }
  /server/get_roster:
    post:
      tags:
        - "User management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            title: body
            type: object
            properties:
              user:
                example: "aaaaa"
                type: string
              server:
                example: "bbbbb"
                type: string
      description: Get roster of a local user
      responses:
        200:
          description: Successful operation
          schema:
            title: successMessage
            type: object
            properties:
              "success":
                type: "string"
                example: true
              "data":
                type: "string"
                example: [
                  {
                    "jid": "aaaaa",
                    "nick": "bbbbb",
                    "subscription": "ccccc",
                    "ask": "ddddd",
                    "group": "eeeee"
                  },
                  {
                    "jid": "fffff",
                    "nick": "ggggg",
                    "subscription": "hhhhh",
                    "ask": "iiiii",
                    "group": "jjjjj"
                  }
                ]

  /server/create_room:
    post:
      tags:
        - "Room management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            title: body
            type: object
            properties:
              name:
                example: "room1"
                type: string
              service:
                example: "muc.example.com"
                type: string
              host:
                example: "example.com"
                type: sting
      description: Create a MUC room name@service in host
      responses:
        200:
          description: Status code (0 on success, 1 otherwise)
          schema:
            title: successMessage
            type: object
            properties:
              "success":
                type: "string"
                example: true
  /server/create_room_with_opts:
    post:
      tags:
        - "Room management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            $ref: "#/definitions/CreateRoomWithOpts"
            title: body

      description: Create a MUC room name@service in host with given options
      responses:
        200:
          description: Status code (0 on success, 1 otherwise)
          schema:
            title: successMessage
            type: object
            properties:
              "success":
                type: "string"
                example: true
  /server/destroy_room:
    post:
      tags:
        - "Room management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            title: body
            type: object
            properties:
              name:
                example: "room1"
                type: string
              service:
                example: "muc.example.com"
                type: string

      description: Destroy a MUC room
      responses:
        200:
          description: Status code (0 on success, 1 otherwise)
          schema:
            title: successMessage
            type: object
            properties:
              "success":
                type: "string"
                example: true
  /server/get_room_affiliation:
    post:
      tags:
        - "Room management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            title: body
            type: object
            properties:
              name:
                example: "room1"
                type: string
              service:
                example: "muc.example.com"
                type: string
              jid:
                example: "user1@example.com"
                type: string
      description: Get affiliation of a user in MUC room
      responses:
        200:
          description: Affiliation of the user
          schema:
            title: successMessage
            type: object
            properties:
              "success":
                type: "string"
                example: true
              "data":
                type: "string"
                example: {"affiliation": "member"}
  /server/get_room_affiliations:
    post:
      tags:
        - "Room management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            title: body
            type: object
            properties:
              name:
                example: "room1"
                type: string
              service:
                example: "muc.example.com"
                type: string
      description: Get the list of affiliations of a MUC room
      responses:
        200:
          description: The list of affiliations with username, domain, affiliation and reason
          schema:
            title: successMessage
            type: object
            properties:
              "success":
                type: "string"
                example: true
              "data":
                type: "string"
                example: [
                  {
                    "username": "user1",
                    "domain": "example.com",
                    "affiliation": "member",
                    "reason": "member"
                  }
                ]
  /server/get_room_occupants:
    post:
      tags:
        - "Room management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            title: body
            type: object
            properties:
              name:
                example: "room1"
                type: string
              service:
                example: "muc.example.com"
                type: string
      description: get_room_occupants
      responses:
        200:
          description: The list of occupants with JID, nick and affiliation
          schema:
            title: successMessage
            type: object
            properties:
              "success":
                type: "string"
                example: true
              "data":
                type: "string"
                example: [
                  {
                    "jid": "user1@example.com/psi",
                    "nick": "User 1",
                    "role": "owner"
                  }
                ]
  /server/get_room_occupants_number:
    post:
      tags:
        - "Room management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            title: body
            type: object
            properties:
              name:
                example: "room1"
                type: string
              service:
                example: "muc.example.com"
                type: string
      description: Get the number of occupants of a MUC room
      responses:
        200:
          description: Number of room occupants
          schema:
            title: successMessage
            type: object
            properties:
              "success":
                type: "string"
                example: true
              "data":
                type: "string"
                example: {"occupants": 7}
  /server/get_room_options:
    post:
      tags:
        - "Room management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            title: body
            type: object
            properties:
              name:
                example: "room1"
                type: string
              service:
                example: "muc.example.com"
                type: string
      description: Get options from a MUC room
      responses:
        200:
          description: List of room options tuples with name and value
          schema:
            title: successMessage
            type: object
            properties:
              "success":
                type: "string"
                example: true
              "data":
                type: "string"
                example: [
                  {
                    "name": "members_only",
                    "value": "true"
                  }
                ]
  /server/get_subscribers:
    post:
      tags:
        - "Room management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            title: body
            type: object
            properties:
              name:
                example: "room1"
                type: string
              service:
                example: "muc.example.com"
                type: string
      description: The list of users that are subscribed to that room
      responses:
        200:
          description: Successful operation
          schema:
            title: successMessage
            type: object
            properties:
              "success":
                type: "string"
                example: true
              "data":
                type: "string"
                example: [
                  "user2@example.com",
                  "user3@example.com"
                ]
  /server/get_user_rooms:
    post:
      tags:
        - "Room management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            title: body
            type: object
            properties:
              user:
                example: "tom"
                type: string
              host:
                example: "example.com"
                type: string
      description: Get the list of rooms where this user is occupant
      responses:
        200:
          description: Successful operation
          schema:
            title: successMessage
            type: "object"
            properties:
              "success":
                type: "string"
                example: true
              "data":
                type: "string"
                example: [
                  "room1@muc.example.com",
                  "room2@muc.example.com"
                ]
  /server/muc_online_rooms:
    post:
      tags:
        - "Room management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            title: body
            type: object
            properties:
              service:
                example: "muc.example.com"
                type: string
      description: List existing rooms ('global' to get all vhosts)
      responses:
        200:
          description: List of rooms
          schema:
            title: successMessage
            type: "object"
            properties:
              "success":
                type: "string"
                example: true
              "data":
                type: "string"
                example: [
                  "room1@muc.example.com",
                  "room2@muc.example.com"
                ]

  /client/get_user_rooms:
    post:
      tags:
        - "Room management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            title: body
            type: object
            properties:
              user:
                example: "tom"
                type: string
              host:
                example: "example.com"
                type: string
              password:
                example: "SomEPass44"
                type: string
      description: Get the list of rooms where this user is occupant
      responses:
        200:
          description: Successful operation
          schema:
            title: successMessage
            type: "object"
            properties:
              "success":
                type: "string"
                example: true
              "data":
                type: "string"
                example: [
                  "room1@muc.example.com",
                  "room2@muc.example.com"
                ]

  /server/get_offline_count:
    post:
      tags:
        - "Msg management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            title: body
            type: object
            properties:
              user:
                example: "aaaaa"
                type: string
              service:
                example: "bbbbb"
                type: string

      description: Get the number of unread offline messages
      responses:
        200:
          description: Number
          schema:
            title: successMessage
            type: object
            properties:
              "success":
                type: "string"
                example: true
              "data":
                type: "string"
                example: {"value": 5}
  /server/kick_session:
    post:
      tags:
        - "Msg management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            title: body
            type: object
            properties:
              user:
                example: "peter"
                type: string
              host:
                example: "myserver.com"
                type: string
              resource:
                example: "Psi"
                type: string
              reason:
                example: "Stuck connection"
                type: sting
      description: Kick a user session
      responses:
        200:
          description: Status code (0 on success, 1 otherwise)
          schema:
            title: successMessage
            type: object
            properties:
              "success":
                type: "string"
                example: true
  /server/kick_user:
    post:
      tags:
        - "Msg management"
      parameters:
        - name: body
          in: body
          description: Local vhost
          required: true
          schema:
            title: body
            type: object
            properties:
              user:
                example: "peter"
                type: string
              host:
                example: "myserver.com"
                type: string
      description: Disconnect user's active sessions
      responses:
        200:
          description: Number of resources that were kicked
          schema:
            title: successMessage
            type: object
            properties:
              "success":
                type: "string"
                example: true

parameters:
  MUCServer:
    name: XMPPMUCHost
    in: path
    description: The XMPP host of the muc service.
    required: true
    type: string
    format: hostname
  hostName:
    name: XMPPHost
    in: path
    description: The XMPP host served by the server.
    required: true
    type: string
    format: hostname
  roomName:
    name: roomName
    in: path
    description: The MUC Light room's **name** (i.e. **not** the room's JID)
    required: true
    type: string

security:
  - mongoose_basic_auth: []
securityDefinitions:
  mongoose_basic_auth:
    type: basic
    description: |
      Log in using your userid (users's bare JID - F.e. alice@wonderland.com) and password.

definitions:
  CreateRoomWithOpts:
    type: "object"
    required:
      - "name"
      - "service"
      - "host"
      - "options"
    properties:
      name:
        type: "string"
        example: "room1"
      service:
        type: "string"
        example: "muc.example.com"
      host:
        type: "string"
        example: "localhost"
      options:
        type: "array"
        xml:
          name: "options"
          wrapped: true
        items:
          $ref: "#/definitions/Options"
    xml:
      name: "CreateRoomWithOpts"
  Options:
    type: "object"
    properties:
      name:
        type: "string"
        example: "members_only"
      value:
        type: "string"
        example: "true"
    xml:
      name: "Options"

